"use strict";!function(){angular.module("openWeather",["openWeather.services","openWeather.controllers","openWeather.directives"])}();
"use strict";!function(){function e(e,t,n){function s(){d(),g.citiesNames.map(function(e){g.requests.push(i(e))}),n.all(g.requests).then(function(){u(3e3,"All requests are done.")})}function i(t){return e.getForecast(t).then(function(e){return e?a(e):void c(t)})}function a(e){return g.citiesObjects.unshift(e),f(e.city.name),e}function c(e){m("Could not find city: "+e)}function r(){l()?(m("City already present, please add another city"),u()):(d(),i(g.newCity).then(function(){g.newCity="",u()}))}function o(e){g.citiesObjects.splice(e,1)}function l(){var e=new RegExp("^"+g.newCity+"$","i");return _.find(g.citiesObjects,function(t){return t.city.name.match(e)})}function u(){var e=arguments.length<=0||void 0===arguments[0]?3e3:arguments[0],n=arguments.length<=1||void 0===arguments[1]?"":arguments[1];n&&(g.alert.message=n),t(function(){g.alert.message="",g.alert.cssClass="alert-success"},e)}function f(e){g.alert.message=e+" was added successfully",g.alert.cssClass="alert-success"}function d(){g.alert.message="Fetching data, please wait...",g.alert.cssClass="alert-info"}function m(e){g.alert.message=e,g.alert.cssClass="alert-danger"}var g=this;g.newCity="",g.alert={},g.requests=[],g.citiesObjects=[],g.onSubmit=r,g.getForecast=i,g.removeCity=o,g.citiesNames=["London","Amsterdam","Paris","Tel Aviv"],s()}angular.module("openWeather.controllers",[]).controller("mainController",e),e.$inject=["weatherAPIService","$timeout","$q"]}();
"use strict";!function(){function t(t){function n(n){function e(n){return n?t.get("/"+n._id).then(a)["catch"](i):!1}function a(t){return t.data.list.map(o),t.data}function i(t){console.log(t.data)}function o(t){return t.weather[0].icon=""+c+t.weather[0].icon+".png"}function u(n){return t.get(r).then(function(t){var e=new RegExp("^"+n+"$","i");return _.find(t.data,function(t){return t.name.match(e)})})["catch"](function(t){console.log(t.data)})}return u(n).then(e)}var e=this,r="city.list.json",c="http://openweathermap.org/img/w/";e.getForecast=n}angular.module("openWeather.services",[]).service("weatherAPIService",t),t.$inject=["$http"]}();
"use strict";!function(){function t(){function t(t){function n(){return t.city.list}function e(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return n()[t].weather[0]}function i(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return e(t).icon}function r(){return t.city.city.name}function c(){return t.city.city.country}function o(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return e(t).description}function u(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return n()[t].temp}function a(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return 1e3*n()[t].dt}t.name=r(),t.country=c(),t.iconUrl=i(),t.description=o(),t.maxTemp=u().max,t.minTemp=u().min,t.date=a(),t.getParsedDate=a,t.getIconUrl=i,t.getDescription=o}var n={restrict:"E",templateUrl:"directives/city/city.html",link:t,scope:{city:"="}};return n}angular.module("openWeather.directives",[]).directive("city",t)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL21haW5Db250cm9sbGVyLmpzIiwic2VydmljZXMvd2VhdGhlckFQSVNlcnZpY2UuanMiLCJkaXJlY3RpdmVzL2NpdHkvY2l0eS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwibWFpbkNvbnRyb2xsZXIiLCJ3ZWF0aGVyQVBJU2VydmljZSIsIiR0aW1lb3V0IiwiJHEiLCJpbml0IiwiYWxlcnRGZXRjaGluZyIsInZtIiwiY2l0aWVzTmFtZXMiLCJtYXAiLCJjaXR5TmFtZSIsInJlcXVlc3RzIiwicHVzaCIsImdldEZvcmVjYXN0IiwiYWxsIiwidGhlbiIsInJlc2V0QWxlcnRPYmplY3QiLCJkYXRhIiwiZ2V0Rm9yZWNhc3RTdWNjZXNzIiwiZ2V0Rm9yZWNhc3RGYWlsZWQiLCJjaXR5T2JqZWN0IiwiY2l0aWVzT2JqZWN0cyIsInVuc2hpZnQiLCJhbGVydFN1Y2Nlc3MiLCJjaXR5IiwibmFtZSIsImFsZXJ0RXJyb3IiLCJvblN1Ym1pdCIsImlzQ2l0eUluTGlzdCIsIm5ld0NpdHkiLCJyZW1vdmVDaXR5IiwiaW5kZXgiLCJzcGxpY2UiLCJyZWdleCIsIlJlZ0V4cCIsIl8iLCJmaW5kIiwibWF0Y2giLCJkZWxheSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJhbGVydCIsImNzc0NsYXNzIiwidGhpcyIsImNvbnRyb2xsZXIiLCIkaW5qZWN0IiwiJGh0dHAiLCJnZXRDaXR5T2JqZWN0Q29tcGxldGUiLCJyZXNwb25zZSIsImdldCIsIl9pZCIsImdldEZvcmVjYXN0Q29tcGxldGUiLCJsaXN0Iiwic2V0SWNvblVybCIsImNvbnNvbGUiLCJsb2ciLCJ3ZWF0aGVyIiwiaWNvbiIsIklDT05TX0JBU0VfVVJMIiwiZ2V0Q2l0eU9iamVjdCIsIkNJVElFU19KU09OIiwiY29udGV4dCIsInNlcnZpY2UiLCJsaW5rIiwic2NvcGUiLCJnZXRGb3JlY2FzdExpc3QiLCJnZXRXZWF0aGVyT2JqZWN0IiwiZ2V0SWNvblVybCIsImdldE5hbWUiLCJnZXRDb3VudHJ5IiwiY291bnRyeSIsImdldERlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJnZXRUZW1wZXJhdHVyZSIsInRlbXAiLCJnZXRQYXJzZWREYXRlIiwiZHQiLCJpY29uVXJsIiwibWF4VGVtcCIsIm1heCIsIm1pblRlbXAiLCJtaW4iLCJkYXRlIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCJdLCJtYXBwaW5ncyI6IkFBQUEsY0FBQSxXQUlDQSxRQUNFQyxPQUFPLGVBQ1AsdUJBQ0EsMEJBQ0E7QUNSSCxjQUFBLFdBVUMsUUFBU0MsR0FBZUMsRUFBbUJDLEVBQVVDLEdBV3BELFFBQVNDLEtBQ1JDLElBRUFDLEVBQUdDLFlBQVlDLElBQUksU0FBVUMsR0FDNUJILEVBQUdJLFNBQVNDLEtBQUtDLEVBQVlILE1BRzlCTixFQUFHVSxJQUFJUCxFQUFHSSxVQUFVSSxLQUFLLFdBQ3hCQyxFQUFpQixJQUFNLDRCQUl6QixRQUFTSCxHQUFZSCxHQUVwQixNQUFPUixHQUFrQlcsWUFBWUgsR0FDbkNLLEtBQUssU0FBVUUsR0FDZixNQUFJQSxHQUNJQyxFQUFtQkQsT0FHMUJFLEdBQWtCVCxLQUt0QixRQUFTUSxHQUFtQkUsR0FJM0IsTUFIQWIsR0FBR2MsY0FBY0MsUUFBUUYsR0FDekJHLEVBQWFILEVBQVdJLEtBQUtDLE1BRXRCTCxFQUdSLFFBQVNELEdBQWtCVCxHQUMxQmdCLEVBQUEsd0JBQW1DaEIsR0FHcEMsUUFBU2lCLEtBQ0pDLEtBQ0hGLEVBQVcsaURBQ1hWLE1BR0FWLElBRUFPLEVBQVlOLEVBQUdzQixTQUNiZCxLQUFLLFdBQ0xSLEVBQUdzQixRQUFVLEdBQ2JiLE9BTUosUUFBU2MsR0FBV0MsR0FDbkJ4QixFQUFHYyxjQUFjVyxPQUFPRCxFQUFPLEdBR2hDLFFBQVNILEtBQ1IsR0FBSUssR0FBUSxHQUFJQyxRQUFPLElBQU0zQixFQUFHc0IsUUFBVSxJQUFLLElBRS9DLE9BQU9NLEdBQUVDLEtBQUs3QixFQUFHYyxjQUFlLFNBQVVELEdBQ3pDLE1BQU9BLEdBQVdJLEtBQUtDLEtBQUtZLE1BQU1KLEtBSXBDLFFBQVNqQixLQUpSLEdBSXlCc0IsR0FBQUMsVUFBQUMsUUFBQSxHQUFBQyxTQUFBRixVQUFBLEdBQVEsSUFBQUEsVUFBQSxHQUFNRyxFQUFBSCxVQUFBQyxRQUFBLEdBQUFDLFNBQUFGLFVBQUEsR0FBVSxHQUFBQSxVQUFBLEVBQzdDRyxLQUNIbkMsRUFBR29DLE1BQU1ELFFBQVVBLEdBR3BCdkMsRUFBUyxXQUNSSSxFQUFHb0MsTUFBTUQsUUFBVyxHQUNwQm5DLEVBQUdvQyxNQUFNQyxTQUFXLGlCQUNsQk4sR0FHSixRQUFTZixHQUFhYixHQUNyQkgsRUFBR29DLE1BQU1ELFFBQWNoQyxFQUFBLDBCQUN2QkgsRUFBR29DLE1BQU1DLFNBQVcsZ0JBR3JCLFFBQVN0QyxLQUNSQyxFQUFHb0MsTUFBTUQsUUFBVyxnQ0FDcEJuQyxFQUFHb0MsTUFBTUMsU0FBVyxhQUdyQixRQUFTbEIsR0FBV2dCLEdBQ25CbkMsRUFBR29DLE1BQU1ELFFBQVdBLEVBQ3BCbkMsRUFBR29DLE1BQU1DLFNBQVcsZUFsR3JCLEdBQUlyQyxHQUFlc0MsSUFDbkJ0QyxHQUFHc0IsUUFBZ0IsR0FDbkJ0QixFQUFHb0MsU0FDSHBDLEVBQUdJLFlBQ0hKLEVBQUdjLGlCQUNIZCxFQUFHb0IsU0FBZ0JBLEVBQ25CcEIsRUFBR00sWUFBZ0JBLEVBQ25CTixFQUFHdUIsV0FBZ0JBLEVBQ25CdkIsRUFBR0MsYUFBaUIsU0FBVSxZQUFhLFFBQVMsWUE2RnBESCxJQTVHRE4sUUFDRUMsT0FBTyw4QkFDUDhDLFdBQVcsaUJBQWtCN0MsR0FFL0JBLEVBQWU4QyxTQUFXLG9CQUFxQixXQUFZO0FDUjVELGNBQUEsV0FVQyxRQUFTN0MsR0FBa0I4QyxHQVcxQixRQUFTbkMsR0FBWUgsR0FLcEIsUUFBU3VDLEdBQXNCQyxHQUM5QixNQUFJQSxHQUNJRixFQUFNRyxJQUFJLElBQU1ELEVBQVNFLEtBQzlCckMsS0FBS3NDLEdBREFMLFNBRUM3QixJQUVHLEVBR2IsUUFBU2tDLEdBQW9CSCxHQUk1QixNQUZBQSxHQUFTakMsS0FBS3FDLEtBQUs3QyxJQUFJOEMsR0FFaEJMLEVBQVNqQyxLQUdqQixRQUFTRSxHQUFrQitCLEdBQzFCTSxRQUFRQyxJQUFJUCxFQUFTakMsTUFHdEIsUUFBU3NDLEdBQVduQyxHQUNuQixNQUFPQSxHQUFXc0MsUUFBUSxHQUFHQyxLQUF0QixHQUFnQ0MsRUFBaUJ4QyxFQUFXc0MsUUFBUSxHQUFHQyxLQUF0QixPQUd6RCxRQUFTRSxHQUFjbkQsR0FDdEIsTUFBT3NDLEdBQU1HLElBQUlXLEdBQ2YvQyxLQUFLLFNBQVVtQyxHQUNmLEdBQUlqQixHQUFRLEdBQUlDLFFBQU8sSUFBTXhCLEVBQVcsSUFBSyxJQUU3QyxPQUFPeUIsR0FBRUMsS0FBS2MsRUFBU2pDLEtBQU0sU0FBVUcsR0FDdEMsTUFBT0EsR0FBV0ssS0FBS1ksTUFBTUosT0FMekJlLFNBT0csU0FBVUUsR0FDbEJNLFFBQVFDLElBQUlQLEVBQVNqQyxRQXBDeEIsTUFBTzRDLEdBQWNuRCxHQUNuQkssS0FBS2tDLEdBWlIsR0FBSWMsR0FBbUJsQixLQUdqQmlCLEVBQWlCLGlCQUVqQkYsRUFBaUIsa0NBRXZCRyxHQUFRbEQsWUFBY0EsRUFmdkJkLFFBQ0VDLE9BQU8sMkJBQ1BnRSxRQUFRLG9CQUFxQjlELEdBRS9CQSxFQUFrQjZDLFNBQVc7QUNSOUIsY0FBQSxXQVFDLFFBQVN2QixLQVlSLFFBQVN5QyxHQUFLQyxHQWNiLFFBQVNDLEtBQ1IsTUFBT0QsR0FBTTFDLEtBQUs4QixLQUduQixRQUFTYyxLQUNSLEdBRHlCckMsR0FBQVEsVUFBQUMsUUFBQSxHQUFBQyxTQUFBRixVQUFBLEdBQVEsRUFBQUEsVUFBQSxFQUNqQyxPQUFPNEIsS0FBa0JwQyxHQUFPMkIsUUFBUSxHQUd6QyxRQUFTVyxLQUdSLEdBSG1CdEMsR0FBQVEsVUFBQUMsUUFBQSxHQUFBQyxTQUFBRixVQUFBLEdBQVEsRUFBQUEsVUFBQSxFQUMzQixPQUFPNkIsR0FBaUJyQyxHQUFPNEIsS0FHaEMsUUFBU1csS0FDUixNQUFPSixHQUFNMUMsS0FBS0EsS0FBS0MsS0FHeEIsUUFBUzhDLEtBQ1IsTUFBT0wsR0FBTTFDLEtBQUtBLEtBQUtnRCxRQUd4QixRQUFTQyxLQUtSLEdBTHVCMUMsR0FBQVEsVUFBQUMsUUFBQSxHQUFBQyxTQUFBRixVQUFBLEdBQVEsRUFBQUEsVUFBQSxFQUMvQixPQUFPNkIsR0FBaUJyQyxHQUFPMkMsWUFHaEMsUUFBU0MsS0FPUixHQVB1QjVDLEdBQUFRLFVBQUFDLFFBQUEsR0FBQUMsU0FBQUYsVUFBQSxHQUFRLEVBQUFBLFVBQUEsRUFDL0IsT0FBTzRCLEtBQWtCcEMsR0FBTzZDLEtBR2pDLFFBQVNDLEtBU1IsR0FUc0I5QyxHQUFBUSxVQUFBQyxRQUFBLEdBQUFDLFNBQUFGLFVBQUEsR0FBUSxFQUFBQSxVQUFBLEVBQzlCLE9BQXFDLEtBQTlCNEIsSUFBa0JwQyxHQUFPK0MsR0F6Q2pDWixFQUFNekMsS0FBYzZDLElBQ3BCSixFQUFNTSxRQUFjRCxJQUNwQkwsRUFBTWEsUUFBY1YsSUFDcEJILEVBQU1RLFlBQWNELElBQ3BCUCxFQUFNYyxRQUFjTCxJQUFpQk0sSUFDckNmLEVBQU1nQixRQUFjUCxJQUFpQlEsSUFDckNqQixFQUFNa0IsS0FBY1AsSUFFcEJYLEVBQU1XLGNBQWlCQSxFQUN2QlgsRUFBTUcsV0FBaUJBLEVBQ3ZCSCxFQUFNTyxlQUFpQkEsRUF2QnhCLEdBQUlZLElBQ0hDLFNBQVUsSUFDVkMsWUFBYSw0QkFDYnRCLEtBQU1BLEVBQ05DLE9BQ0MxQyxLQUFNLEtBSVIsT0FBTzZELEdBZFJ0RixRQUNFQyxPQUFPLDZCQUNQcUYsVUFBVSxPQUFRN0QiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ29wZW5XZWF0aGVyJywgW1xuXHRcdFx0J29wZW5XZWF0aGVyLnNlcnZpY2VzJyxcblx0XHRcdCdvcGVuV2VhdGhlci5jb250cm9sbGVycycsXG5cdFx0XHQnb3BlbldlYXRoZXIuZGlyZWN0aXZlcydcblx0XHRdKTtcblxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdvcGVuV2VhdGhlci5jb250cm9sbGVycycsIFtdKVxuXHRcdC5jb250cm9sbGVyKCdtYWluQ29udHJvbGxlcicsIG1haW5Db250cm9sbGVyKTtcblxuXHRtYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyd3ZWF0aGVyQVBJU2VydmljZScsICckdGltZW91dCcsICckcSddO1xuXG5cdGZ1bmN0aW9uIG1haW5Db250cm9sbGVyKHdlYXRoZXJBUElTZXJ2aWNlLCAkdGltZW91dCwgJHEpIHtcblx0XHR2YXIgdm0gICAgICAgICAgID0gdGhpcztcblx0XHR2bS5uZXdDaXR5ICAgICAgID0gJyc7XG5cdFx0dm0uYWxlcnQgICAgICAgICA9IHt9O1xuXHRcdHZtLnJlcXVlc3RzICAgICAgPSBbXTtcblx0XHR2bS5jaXRpZXNPYmplY3RzID0gW107XG5cdFx0dm0ub25TdWJtaXQgICAgICA9IG9uU3VibWl0O1xuXHRcdHZtLmdldEZvcmVjYXN0ICAgPSBnZXRGb3JlY2FzdDtcblx0XHR2bS5yZW1vdmVDaXR5ICAgID0gcmVtb3ZlQ2l0eTtcblx0XHR2bS5jaXRpZXNOYW1lcyAgID0gWydMb25kb24nLCAnQW1zdGVyZGFtJywgJ1BhcmlzJywgJ1RlbCBBdml2J107XG5cblx0XHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdFx0YWxlcnRGZXRjaGluZygpO1xuXG5cdFx0XHR2bS5jaXRpZXNOYW1lcy5tYXAoZnVuY3Rpb24gKGNpdHlOYW1lKSB7XG5cdFx0XHRcdHZtLnJlcXVlc3RzLnB1c2goZ2V0Rm9yZWNhc3QoY2l0eU5hbWUpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQkcS5hbGwodm0ucmVxdWVzdHMpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXNldEFsZXJ0T2JqZWN0KDMwMDAsICdBbGwgcmVxdWVzdHMgYXJlIGRvbmUuJyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRGb3JlY2FzdChjaXR5TmFtZSkge1xuXG5cdFx0XHRyZXR1cm4gd2VhdGhlckFQSVNlcnZpY2UuZ2V0Rm9yZWNhc3QoY2l0eU5hbWUpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRGb3JlY2FzdFN1Y2Nlc3MoZGF0YSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0Z2V0Rm9yZWNhc3RGYWlsZWQoY2l0eU5hbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Rm9yZWNhc3RTdWNjZXNzKGNpdHlPYmplY3QpIHtcblx0XHRcdHZtLmNpdGllc09iamVjdHMudW5zaGlmdChjaXR5T2JqZWN0KTtcblx0XHRcdGFsZXJ0U3VjY2VzcyhjaXR5T2JqZWN0LmNpdHkubmFtZSk7XG5cblx0XHRcdHJldHVybiBjaXR5T2JqZWN0O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldEZvcmVjYXN0RmFpbGVkKGNpdHlOYW1lKSB7XG5cdFx0XHRhbGVydEVycm9yKGBDb3VsZCBub3QgZmluZCBjaXR5OiAke2NpdHlOYW1lfWApO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uU3VibWl0KCkge1xuXHRcdFx0aWYgKGlzQ2l0eUluTGlzdCgpKSB7XG5cdFx0XHRcdGFsZXJ0RXJyb3IoJ0NpdHkgYWxyZWFkeSBwcmVzZW50LCBwbGVhc2UgYWRkIGFub3RoZXIgY2l0eScpO1xuXHRcdFx0XHRyZXNldEFsZXJ0T2JqZWN0KCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0YWxlcnRGZXRjaGluZygpO1xuXG5cdFx0XHRcdGdldEZvcmVjYXN0KHZtLm5ld0NpdHkpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0dm0ubmV3Q2l0eSA9ICcnO1xuXHRcdFx0XHRcdFx0cmVzZXRBbGVydE9iamVjdCgpO1xuXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlQ2l0eShpbmRleCkge1xuXHRcdFx0dm0uY2l0aWVzT2JqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzQ2l0eUluTGlzdCgpIHtcblx0XHRcdHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgdm0ubmV3Q2l0eSArICckJywgJ2knKTtcblxuXHRcdFx0cmV0dXJuIF8uZmluZCh2bS5jaXRpZXNPYmplY3RzLCBmdW5jdGlvbiAoY2l0eU9iamVjdCkge1xuXHRcdFx0XHRyZXR1cm4gY2l0eU9iamVjdC5jaXR5Lm5hbWUubWF0Y2gocmVnZXgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVzZXRBbGVydE9iamVjdChkZWxheSA9IDMwMDAsIG1lc3NhZ2UgPSAnJykge1xuXHRcdFx0aWYgKG1lc3NhZ2UpIHtcblx0XHRcdFx0dm0uYWxlcnQubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0XHR9XG5cblx0XHRcdCR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dm0uYWxlcnQubWVzc2FnZSAgPSAnJztcblx0XHRcdFx0dm0uYWxlcnQuY3NzQ2xhc3MgPSAnYWxlcnQtc3VjY2Vzcyc7XG5cdFx0XHR9LCBkZWxheSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWxlcnRTdWNjZXNzKGNpdHlOYW1lKSB7XG5cdFx0XHR2bS5hbGVydC5tZXNzYWdlICA9IGAke2NpdHlOYW1lfSB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5YDtcblx0XHRcdHZtLmFsZXJ0LmNzc0NsYXNzID0gJ2FsZXJ0LXN1Y2Nlc3MnO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFsZXJ0RmV0Y2hpbmcoKSB7XG5cdFx0XHR2bS5hbGVydC5tZXNzYWdlICA9ICdGZXRjaGluZyBkYXRhLCBwbGVhc2Ugd2FpdC4uLic7XG5cdFx0XHR2bS5hbGVydC5jc3NDbGFzcyA9ICdhbGVydC1pbmZvJztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhbGVydEVycm9yKG1lc3NhZ2UpIHtcblx0XHRcdHZtLmFsZXJ0Lm1lc3NhZ2UgID0gbWVzc2FnZTtcblx0XHRcdHZtLmFsZXJ0LmNzc0NsYXNzID0gJ2FsZXJ0LWRhbmdlcic7XG5cdFx0fVxuXG5cdFx0aW5pdCgpO1xuXHR9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnb3BlbldlYXRoZXIuc2VydmljZXMnLCBbXSlcblx0XHQuc2VydmljZSgnd2VhdGhlckFQSVNlcnZpY2UnLCB3ZWF0aGVyQVBJU2VydmljZSk7XG5cblx0d2VhdGhlckFQSVNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuXHRmdW5jdGlvbiB3ZWF0aGVyQVBJU2VydmljZSgkaHR0cCkge1xuXG5cdFx0dmFyIGNvbnRleHQgICAgICAgICAgPSB0aGlzO1xuXHRcdGNvbnN0IEFQSV9LRVkgICAgICAgID0gJ2M1YWMwMDk4YzhjN2I3YTU1MTJiNDY3OWE1YjExZjlmJztcblx0XHRjb25zdCBCQVNFX0FQSV9VUkwgICA9ICdodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS8nO1xuXHRcdGNvbnN0IENJVElFU19KU09OICAgID0gJ2NpdHkubGlzdC5qc29uJztcblx0XHRjb25zdCBGT1JFQ0FTVF9VUkwgICA9IGAke0JBU0VfQVBJX1VSTH0vZm9yZWNhc3QvZGFpbHk/QVBQSUQ9JHtBUElfS0VZfSZ1bml0cz1tZXRyaWMmY250PTYmaWQ9YDtcblx0XHRjb25zdCBJQ09OU19CQVNFX1VSTCA9ICdodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93Lyc7XG5cblx0XHRjb250ZXh0LmdldEZvcmVjYXN0ID0gZ2V0Rm9yZWNhc3Q7XG5cblx0XHRmdW5jdGlvbiBnZXRGb3JlY2FzdChjaXR5TmFtZSkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0Q2l0eU9iamVjdChjaXR5TmFtZSlcblx0XHRcdFx0LnRoZW4oZ2V0Q2l0eU9iamVjdENvbXBsZXRlKTtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0Q2l0eU9iamVjdENvbXBsZXRlKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGlmIChyZXNwb25zZSkge1xuXHRcdFx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy8nICsgcmVzcG9uc2UuX2lkKVxuXHRcdFx0XHRcdFx0LnRoZW4oZ2V0Rm9yZWNhc3RDb21wbGV0ZSlcblx0XHRcdFx0XHRcdC5jYXRjaChnZXRGb3JlY2FzdEZhaWxlZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldEZvcmVjYXN0Q29tcGxldGUocmVzcG9uc2UpIHtcblx0XHRcdFx0Ly8gU2V0IHRoZSBiYXNlIHVybCBmb3IgYWxsIHRoZSBpY29uc1xuXHRcdFx0XHRyZXNwb25zZS5kYXRhLmxpc3QubWFwKHNldEljb25VcmwpO1xuXG5cdFx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBnZXRGb3JlY2FzdEZhaWxlZChyZXNwb25zZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2V0SWNvblVybChjaXR5T2JqZWN0KSB7XG5cdFx0XHRcdHJldHVybiBjaXR5T2JqZWN0LndlYXRoZXJbMF0uaWNvbiA9IGAke0lDT05TX0JBU0VfVVJMfSR7Y2l0eU9iamVjdC53ZWF0aGVyWzBdLmljb259LnBuZ2A7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldENpdHlPYmplY3QoY2l0eU5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICRodHRwLmdldChDSVRJRVNfSlNPTilcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgY2l0eU5hbWUgKyAnJCcsICdpJyk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBfLmZpbmQocmVzcG9uc2UuZGF0YSwgZnVuY3Rpb24gKGNpdHlPYmplY3QpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNpdHlPYmplY3QubmFtZS5tYXRjaChyZWdleCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KS5jYXRjaChmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnb3BlbldlYXRoZXIuZGlyZWN0aXZlcycsIFtdKVxuXHRcdC5kaXJlY3RpdmUoJ2NpdHknLCBjaXR5KTtcblxuXHRmdW5jdGlvbiBjaXR5KCkge1xuXHRcdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICdkaXJlY3RpdmVzL2NpdHkvY2l0eS5odG1sJyxcblx0XHRcdGxpbms6IGxpbmssXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRjaXR5OiAnPSdcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGRpcmVjdGl2ZTtcblxuXHRcdGZ1bmN0aW9uIGxpbmsoc2NvcGUpIHtcblxuXHRcdFx0c2NvcGUubmFtZSAgICAgICAgPSBnZXROYW1lKCk7XG5cdFx0XHRzY29wZS5jb3VudHJ5ICAgICA9IGdldENvdW50cnkoKTtcblx0XHRcdHNjb3BlLmljb25VcmwgICAgID0gZ2V0SWNvblVybCgpO1xuXHRcdFx0c2NvcGUuZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuXHRcdFx0c2NvcGUubWF4VGVtcCAgICAgPSBnZXRUZW1wZXJhdHVyZSgpLm1heDtcblx0XHRcdHNjb3BlLm1pblRlbXAgICAgID0gZ2V0VGVtcGVyYXR1cmUoKS5taW47XG5cdFx0XHRzY29wZS5kYXRlICAgICAgICA9IGdldFBhcnNlZERhdGUoKTtcblxuXHRcdFx0c2NvcGUuZ2V0UGFyc2VkRGF0ZSAgPSBnZXRQYXJzZWREYXRlO1xuXHRcdFx0c2NvcGUuZ2V0SWNvblVybCAgICAgPSBnZXRJY29uVXJsO1xuXHRcdFx0c2NvcGUuZ2V0RGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbjtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0Rm9yZWNhc3RMaXN0KCkge1xuXHRcdFx0XHRyZXR1cm4gc2NvcGUuY2l0eS5saXN0O1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBnZXRXZWF0aGVyT2JqZWN0KGluZGV4ID0gMCkge1xuXHRcdFx0XHRyZXR1cm4gZ2V0Rm9yZWNhc3RMaXN0KClbaW5kZXhdLndlYXRoZXJbMF07XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldEljb25VcmwoaW5kZXggPSAwKSB7XG5cdFx0XHRcdHJldHVybiBnZXRXZWF0aGVyT2JqZWN0KGluZGV4KS5pY29uO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBnZXROYW1lKCkge1xuXHRcdFx0XHRyZXR1cm4gc2NvcGUuY2l0eS5jaXR5Lm5hbWU7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldENvdW50cnkoKSB7XG5cdFx0XHRcdHJldHVybiBzY29wZS5jaXR5LmNpdHkuY291bnRyeTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZ2V0RGVzY3JpcHRpb24oaW5kZXggPSAwKSB7XG5cdFx0XHRcdHJldHVybiBnZXRXZWF0aGVyT2JqZWN0KGluZGV4KS5kZXNjcmlwdGlvbjtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZ2V0VGVtcGVyYXR1cmUoaW5kZXggPSAwKSB7XG5cdFx0XHRcdHJldHVybiBnZXRGb3JlY2FzdExpc3QoKVtpbmRleF0udGVtcDtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZ2V0UGFyc2VkRGF0ZShpbmRleCA9IDApIHtcblx0XHRcdFx0cmV0dXJuIGdldEZvcmVjYXN0TGlzdCgpW2luZGV4XS5kdCAqIDEwMDA7XG5cdFx0XHR9XG5cblx0XHR9XG5cdH1cblxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
